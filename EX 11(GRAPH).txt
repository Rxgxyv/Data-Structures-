[21bcs176@mepcolinux graphex11]$cat book.h
#include<iostream>
#include<queue>
using namespace std;

class CBook
{
    int bookId;
    string bookName;
    double price;
public:
    CBook();
    CBook(int, string, double);
    bool operator ==(CBook);
    void displayBook();
    int getId();
};

class CGraph
{
    int** adjMatrix;
    CBook* vertices;
    bool* visited;
    int noOfVertices;
    bool isDirected;
public:
    CGraph(CBook*, int, bool);
    void dfs(int);
    void bfs(int);
    void displayAdjMatrix();
    void displayVertices();
    void createMatrix();
    void resetVisited();
    int searchVertex(CBook);
};
[21bcs176@mepcolinux graphex11]$cat bookimmp.cpp
cat: bookimmp.cpp: No such file or directory
[21bcs176@mepcolinux graphex11]$cat bookimp.cpp
#include"book.h"
CBook::CBook()
{
        bookId = 0;
        bookName = "";
        price = 0;
}

CBook::CBook(int id, string n, double p)
{
        bookId = id;
        bookName = n;
        price = p;
}
bool CBook::operator ==(CBook b)
{
        return (bookId == b.bookId && bookName == b.bookName && price == b.price);
}
void CBook::displayBook()
{
        cout<<bookId<<"\t";
        cout<<bookName<<"\t";
        cout<<price<<endl;
}
int CBook::getId()
{
        return bookId;
}

CGraph::CGraph(CBook* v, int n, bool isD)
{
    noOfVertices = n;
    vertices = new CBook[n];
    isDirected = isD;
    adjMatrix = new int*[n];
    for(int i = 0; i < n; i++)
    {
        adjMatrix[i] = new int[n];
        for(int j = 0; j < n; j++)
            adjMatrix[i][j] = 0;
    }
    for(int i = 0; i < n; i++)
        vertices[i] = v[i];
}

void CGraph::createMatrix()
{
    int u, v;
    int edges;
    displayVertices();
    cout<<"Enter the number of edges: ";
    cin >> edges;
    for(int i = 0 ; i < edges; i++)
    {
        cout<<i+1<<". Enter the indices of the starting and ending verices: ";
        cin >> u >> v;
        adjMatrix[u][v] = 1;
        if(!isDirected)
            adjMatrix[v][u] = 1;
    }
}

void CGraph::dfs(int start)
{
    if(start < 0 || start >= noOfVertices)return;

    visited[start] = true;
    vertices[start].displayBook();
    for(int i = 0; i < noOfVertices; i++)
    {
        if(adjMatrix[start][i] == 1 && !visited[i])
            dfs(i);
    }
}

void CGraph::bfs(int start)
{
    if(start < 0 || start >= noOfVertices)return;

    queue<int> q;
    q.push(start);
    cout<<"\nID\tName\tPrice\n";
    while(!q.empty())
    {
        int idx = q.front();
        q.pop();
        if(!visited[idx])vertices[idx].displayBook();
        visited[idx] = true;
        for(int i = 0; i < noOfVertices; i++)
        {
            if(adjMatrix[idx][i] == 1 && !visited[i])
            {
                q.push(i);
            }
        }
    }
}

void CGraph::resetVisited()
{
    for(int i = 0 ; i < noOfVertices; i++)
        visited[i] = false;
}

int CGraph::searchVertex(CBook ele)
{
    for(int i = 0; i < noOfVertices; i++)
    {
        if(vertices[i] == ele)return i;
    }

    return -1;
}

void CGraph::displayVertices()
{
    cout<<"Index\tID\tName\tPrice\n";
    for(int i = 0 ; i < noOfVertices; i++)
    {
        cout<<i<<"\t";
        vertices[i].displayBook();
    }
}

void CGraph::displayAdjMatrix()
{
    cout<<"\t";
    for(int i = 0; i < noOfVertices; i++)cout<<i<<"\t";
    cout<<"\n----------------------------------------------\n";
    for(int i = 0; i < noOfVertices; i++)
    {
        cout<<i<<"|\t";
        for(int j = 0; j < noOfVertices; j++)
        {
            cout<<adjMatrix[i][j]<<"\t";
        }
        cout<<endl;
    }
}
[21bcs176@mepcolinux graphex11]$cat bookapp.cpp
#include"book.h"

int main()
{
    int cap;
    cout<<"Enter no of vertices: ";
    cin>>cap;
    CBook* v = new CBook[cap];
    cout<<"Enter the details of the vertices\n";
    for(int i = 0; i < cap; i++)
    {
        int id;
        string name;
        double price;
        cout<<"Enter the id, name, price: ";
        cin>>id>>name>>price;
        v[i] = CBook(id, name, price);
    }
    bool isdirected;
    string d;
    cout<<"Is the graph directed(yes/no) : ";
    cin>>d;
    if(d == "yes")isdirected = true;
    else if(d == "no") isdirected = false;
    else
    {
        cout<<"Invalid input\n";
        return 0;
    }
    CGraph g(v, cap, isdirected);

    int ch;
    do
    {
        cout<<"\n\nBook Management System using Graphs";
        cout<<"\n1. Create Adjacency Matrix";
        cout<<"\n2. Depth First Search";
        cout<<"\n3. Breadth First Search";
        cout<<"\n4. Display";
        cout<<"\n5. Exit";
        cout<<"\nEnter your choice: ";
        cin >> ch;
        switch (ch)
        {
        case 1:
        {
            g.createMatrix();
            break;
        }
        case 2:
        {
            int id;
            string name;
            double price;
            cout<<"Enter the details of the starting vertex\n";
            cout<<"Enter the id, name, price: ";
            cin>>id>>name>>price;
            int idx = g.searchVertex(CBook(id, name, price));
            if(idx == -1)
                cout<<"\nNo such vertex found in the graph";
            else
            {
                cout<<"\nID\tName\tPrice\n";
                g.dfs(idx);
            }
            g.resetVisited();
            break;
        }
        case 3:
        {
            int id;
            string name;
            double price;
            cout<<"Enter the details of the starting vertex\n";
            cout<<"Enter the id, name, price: ";
            cin>>id>>name>>price;
            int idx = g.searchVertex(CBook(id, name, price));
            if(idx == -1)
                cout<<"\nNo such vertex found in the graph";
            else
                g.bfs(idx);
            g.resetVisited();
            break;
        }
        case 4:
        {
            cout<<"List of vertices in the graph\n";
            g.displayVertices();
            cout<<"The adjacency matrix representing the graph\n";
            g.displayAdjMatrix();
            break;
        }
        }
    } while (ch > 0 && ch < 5);
    return 0;
}
[21bcs176@mepcolinux graphex11]$cat makefile
book:bookimp.o bookapp.o
        g++ bookimp.o bookapp.o -o book
bookimp.o:bookimp.cpp
        g++ -c bookimp.cpp
bookapp.o:bookapp.cpp
        g++ -c bookapp.cpp